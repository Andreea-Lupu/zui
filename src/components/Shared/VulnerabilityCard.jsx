import React, { useEffect, useMemo, useState } from 'react';

// utility
import { api, endpoints } from '../../api';

// components
import Collapse from '@mui/material/Collapse';
import { Box, Card, CardContent, Grid, ToggleButton, Stack, Typography, Divider, Drawer, Button } from '@mui/material';
import makeStyles from '@mui/styles/makeStyles';
import { host } from '../../host';
import { isEmpty } from 'lodash';
import { Link } from 'react-router-dom';
import { KeyboardArrowDown, KeyboardArrowRight } from '@mui/icons-material';
import { VulnerabilityChipCheck } from 'utilities/vulnerabilityAndSignatureCheck';
import { CVE_FIXEDIN_PAGE_SIZE } from 'utilities/paginationConstants';

import CloseIcon from '@mui/icons-material/Close';

const useStyles = makeStyles((theme) => ({
  card: {
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    background: '#FFFFFF',
    boxShadow: '0rem 0.3125rem 0.625rem rgba(131, 131, 131, 0.08)',
    border: '1px solid #E0E5EB',
    borderRadius: '0.75rem',
    flex: 'none',
    alignSelf: 'stretch',
    width: '100%'
  },
  cardSmall: {
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    background: '#FFFFFF',
    boxShadow: '0rem 0.3125rem 0.625rem rgba(131, 131, 131, 0.08)',
    border: '1px solid #E0E5EB',
    borderRadius: '0.75rem',
    flex: 'none',
    alignSelf: 'stretch',
    width: '100%'
  },
  content: {
    textAlign: 'left',
    color: '#606060',
    padding: '2% 3% 2% 3%',
    width: '100%'
  },
  contentSmall: {
    textAlign: 'left',
    color: '#606060',
    padding: '1% 3% 1% 3%',
    width: '100%',
    '&:last-child': {
      paddingBottom: '1%'
    }
  },
  cveId: {
    color: theme.palette.primary.main,
    fontSize: '1rem',
    fontWeight: 400,
    textDecoration: 'underline'
  },
  cveIdSmall: {
    color: theme.palette.primary.main,
    fontSize: '0.75rem',
    fontWeight: 500,
    textDecoration: 'underline'
  },
  cveSummary: {
    color: theme.palette.secondary.dark,
    fontSize: '0.75rem',
    fontWeight: '600',
    textOverflow: 'ellipsis',
    marginTop: '0.5rem'
  },
  cveSummarySmall: {
    color: theme.palette.secondary.dark,
    fontSize: '0.75rem',
    fontWeight: '600',
    textOverflow: 'ellipsis'
  },
  link: {
    color: '#52637A',
    fontSize: '1rem',
    letterSpacing: '0.009375rem',
    paddingRight: '1rem',
    textDecorationLine: 'underline'
  },
  dropdown: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  dropdownText: {
    color: '#1479FF',
    fontSize: '0.75rem',
    fontWeight: '600',
    cursor: 'pointer',
    textAlign: 'center'
  },
  dropdownCVE: {
    color: '#1479FF',
    cursor: 'pointer'
  },
  vulnerabilityCardDivider: {
    margin: '1rem 0'
  },
  drawerTitle: {
    color: theme.palette.primary.main,
    fontSize: '1.5rem',
    fontWeight: '600',
    marginBottom: '0',
    textDecoration: 'underline'
  },
  drawer: {
    margin: '3rem'
  },
  closeDrawer: {
    position: 'relative',
    alignItems: 'baseline',
    maxWidth: '100%',
    flexDirection: 'row',
    justifyContent: 'right'
  },
  cardGrid: {
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'start',
    background: '#FFFFFF',
    borderRadius: '0.5rem',
    borderColor: '#FFFFFF',
    flex: 'none',
    alignSelf: 'stretch',
    flexGrow: 0,
    order: 0,
    width: '100%'
  },
  cardContentGrid: {
    padding: '0.5rem 1rem',
    '&:last-child': {
      paddingBottom: '0.5rem'
    },
    spacing: '0.75rem'
  },
  metadataHeader: {
    color: theme.palette.secondary.dark
  },
  metadataBody: {
    color: theme.palette.primary.main,
    fontFamily: 'Roboto',
    fontStyle: 'normal',
    fontWeight: 400,
    fontSize: '1rem',
    lineHeight: '150%',
    align: 'left'
  },
  packagesTable: {
    marginTop: '1rem'
  },
  tableHeaderText: {
    color: theme.palette.secondary.dark,
    fontSize: '1rem'
  }
}));
function VulnerabilitiyCard(props) {
  const classes = useStyles();
  const { cve, name, platform, viewMode } = props;
  const [openCVE, setOpenCVE] = useState(viewMode);
  const [openDrawer, setOpenDrawer] = useState(false);
  const [openDesc, setOpenDesc] = useState(false);
  const [openFixed, setOpenFixed] = useState(false);
  const [loadingFixed, setLoadingFixed] = useState(true);
  const [fixedInfo, setFixedInfo] = useState([]);
  const abortController = useMemo(() => new AbortController(), []);

  // pagination props
  const [pageNumber, setPageNumber] = useState(1);
  const [isEndOfList, setIsEndOfList] = useState(false);

  const getPaginatedResults = () => {
    if (!openFixed || isEndOfList) {
      return;
    }
    setLoadingFixed(true);
    api
      .get(
        `${host()}${endpoints.imageListWithCVEFixed(
          cve.id,
          name,
          { pageNumber, pageSize: CVE_FIXEDIN_PAGE_SIZE },
          platform ? { Os: platform.Os, Arch: platform.Arch } : {}
        )}`,
        abortController.signal
      )
      .then((response) => {
        if (response.data && response.data.data) {
          const fixedTagsList = response.data.data.ImageListWithCVEFixed?.Results?.map((e) => e.Tag);
          setFixedInfo((previousState) => [...previousState, ...fixedTagsList]);
          setIsEndOfList(
            [...fixedInfo, ...fixedTagsList].length >= response.data.data.ImageListWithCVEFixed?.Page?.TotalCount
          );
        }
        setLoadingFixed(false);
      })
      .catch((e) => {
        console.error(e);
        setIsEndOfList(true);
        setLoadingFixed(false);
      });
  };

  useEffect(() => {
    getPaginatedResults();
    return () => {
      abortController.abort();
    };
  }, [openFixed, pageNumber]);

  useEffect(() => {
    setOpenCVE(viewMode);
    if (viewMode === 2) {
      setOpenFixed(true);
    }
  }, [viewMode]);

  const loadMore = () => {
    if (loadingFixed || isEndOfList) return;
    setPageNumber((pageNumber) => pageNumber + 1);
  };

  const renderFixedVer = () => {
    if (!isEmpty(fixedInfo)) {
      return fixedInfo.map((tag, index) => {
        return (
          <Link key={index} to={`/image/${encodeURIComponent(name)}/tag/${tag}`} className={classes.link}>
            {tag}
          </Link>
        );
      });
    } else {
      return 'Not fixed';
    }
  };

  const renderLoadMore = () => {
    return (
      !isEndOfList && (
        <Typography
          sx={{
            color: '#3366CC',
            cursor: 'pointer',
            fontSize: '1rem',
            letterSpacing: '0.009375rem',
            paddingRight: '1rem',
            textDecorationLine: 'underline'
          }}
          onClick={loadMore}
          component="div"
        >
          Load more
        </Typography>
      )
    );
  };

  const renderDrawer = () => {
    return (
      <Box maxWidth="525px">
        <Stack direction="column" spacing="1rem" className={classes.drawer}>
          <Stack direction="row" spacing="1.25rem">
            <Typography variant="h4" gutterBottom component="div" align="left" className={classes.drawerTitle}>
              {cve.id}
            </Typography>
            <VulnerabilityChipCheck vulnerabilitySeverity={cve.severity} />
            <ToggleButton
              value="close"
              title="Close"
              size="small"
              className={classes.closeDrawer}
              onChange={() => setOpenDrawer(false)}
            >
              <CloseIcon />
            </ToggleButton>
          </Stack>
          <Typography variant="body1" gutterBottom component="div" align="left">
            {cve.title}
          </Typography>
          <Divider className={classes.vulnerabilityCardDivider} />
          <Grid item xs={12}>
            <Card variant="outlined" className={classes.cardGrid}>
              <CardContent className={classes.cardContentGrid}>
                <Typography variant="body2" align="left" className={classes.metadataHeader}>
                  External reference
                </Typography>
                <Typography
                  variant="body1"
                  align="left"
                  className={classes.metadataBody}
                  component={Link}
                  to={cve.reference}
                  target="_blank"
                  rel="noreferrer"
                  sx={{ textDecoration: 'underline' }}
                >
                  {cve.reference}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12}>
            <Card variant="outlined" className={classes.cardGrid}>
              <CardContent className={classes.cardContentGrid}>
                <Typography variant="body2" align="left" className={classes.metadataHeader}>
                  Packages
                </Typography>
                <Stack direction="column" className={classes.packagesTable} sx={{ width: '100%', padding: '0.5rem 0' }}>
                  <Stack direction="row" spacing="1.25rem" justifyContent="space-between">
                    <Typography variant="body1" className={classes.tableHeaderText}>
                      Name
                    </Typography>
                    <Typography variant="body1" className={classes.tableHeaderText}>
                      Installed Version
                    </Typography>
                    <Typography variant="body1" className={classes.tableHeaderText}>
                      Fixed Version
                    </Typography>
                  </Stack>
                  {cve.packageList.map((el) => (
                    <Stack
                      direction="row"
                      className={classes.metadataBody}
                      key={cve.packageName}
                      spacing="1.25rem"
                      justifyContent="space-between"
                    >
                      <Typography variant="body1" color="primary">
                        {el.packageName}
                      </Typography>
                      <Typography
                        variant="body1"
                        color="primary"
                        sx={{ direction: 'flex', justifyContent: 'flex-end' }}
                      >
                        {el.packageInstalledVersion}
                      </Typography>
                      <Typography sx={{ textAlign: 'right' }} variant="body1" color="primary">
                        {el.packageFixedVersion}
                      </Typography>
                    </Stack>
                  ))}
                </Stack>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12}>
            <Card variant="outlined" className={classes.cardGrid}>
              <CardContent className={classes.cardContentGrid}>
                <Typography variant="body2" align="left" className={classes.metadataHeader}>
                  Fixed in
                </Typography>
                <Typography variant="body1" align="left" className={classes.metadataBody}>
                  <Box sx={{ width: '100%', padding: '0.5rem 0' }}>
                    {loadingFixed ? (
                      'Loading...'
                    ) : (
                      <Stack direction="row" sx={{ flexWrap: 'wrap' }}>
                        {renderFixedVer()}
                        {renderLoadMore()}
                      </Stack>
                    )}
                  </Box>
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12}>
            <Card variant="outlined" className={classes.cardGrid}>
              <CardContent className={classes.cardContentGrid}>
                <Typography variant="body2" align="left" className={classes.metadataHeader}>
                  Description
                </Typography>
                <Typography variant="body1" align="left" className={classes.metadataBody}>
                  {cve.description}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        </Stack>
      </Box>
    );
  };

  const renderDrawerList = () => {
    return (
      <Card className={classes.cardSmall} raised>
        <CardContent className={classes.contentSmall}>
          <Stack direction="row" spacing="1.25rem">
            <Typography
              variant="body1"
              align="left"
              className={classes.cveIdSmall}
              component={Button}
              onClick={() => setOpenDrawer(!openDrawer)}
            >
              {cve.id}
            </Typography>
            <div style={{ transform: 'scale(0.8)' }}>
              <VulnerabilityChipCheck vulnerabilitySeverity={cve.severity} />
            </div>
            <Typography variant="body1" align="left" className={classes.cveSummarySmall}>
              {cve.title}
            </Typography>
          </Stack>
          <Drawer
            anchor="right"
            open={openDrawer}
            PaperProps={{
              sx: {
                backgroundColor: '#f6f7f9!important',
                top: document.getElementById('vulnerabilities-grid').offsetTop,
                overflow: 'scroll'
              }
            }}
            onClose={() => setOpenDrawer(false)}
            ModalProps={{
              disableScrollLock: true,
              disableRestoreFocus: true,
              slotProps: {
                root: {
                  style: {
                    position: 'relative',
                    top: 'unset',
                    bottom: 'unset',
                    left: 'unset',
                    right: 'unset'
                  }
                }
              }
            }}
            hideBackdrop={true}
          >
            {renderDrawer()}
          </Drawer>
        </CardContent>
      </Card>
    );
  };

  const renderExpandedOrCollapsedList = () => {
    return (
      <Card className={classes.card} raised>
        <CardContent className={classes.content}>
          <Stack direction="row" spacing="1.25rem">
            {openCVE === 1 ? (
              <KeyboardArrowRight className={classes.dropdownCVE} onClick={() => setOpenCVE(0)} />
            ) : (
              <KeyboardArrowDown className={classes.dropdownCVE} onClick={() => setOpenCVE(1)} />
            )}
            <Typography variant="body1" align="left" className={classes.cveId}>
              {cve.id}
            </Typography>
            <VulnerabilityChipCheck vulnerabilitySeverity={cve.severity} />
          </Stack>
          <Collapse in={openCVE === 0} timeout="auto" unmountOnExit>
            <Typography variant="body1" align="left" className={classes.cveSummary}>
              {cve.title}
            </Typography>
            <Divider className={classes.vulnerabilityCardDivider} />
            <Stack className={classes.dropdown} onClick={() => setOpenFixed(!openFixed)}>
              {!openFixed ? (
                <KeyboardArrowRight className={classes.dropdownText} />
              ) : (
                <KeyboardArrowDown className={classes.dropdownText} />
              )}
              <Typography className={classes.dropdownText}>Fixed in</Typography>
            </Stack>
            <Collapse in={openFixed} timeout="auto" unmountOnExit>
              <Box sx={{ width: '100%', padding: '0.5rem 0' }}>
                {loadingFixed ? (
                  'Loading...'
                ) : (
                  <Stack direction="row" sx={{ flexWrap: 'wrap' }}>
                    {renderFixedVer()}
                    {renderLoadMore()}
                  </Stack>
                )}
              </Box>
            </Collapse>
            <Stack className={classes.dropdown} onClick={() => setOpenDesc(!openDesc)}>
              {!openDesc ? (
                <KeyboardArrowRight className={classes.dropdownText} />
              ) : (
                <KeyboardArrowDown className={classes.dropdownText} />
              )}
              <Typography className={classes.dropdownText}>Description</Typography>
            </Stack>
            <Collapse in={openDesc} timeout="auto" unmountOnExit>
              <Box sx={{ padding: '0.5rem 0' }}>
                <Typography variant="body2" align="left" sx={{ color: '#0F2139', fontSize: '1rem' }}>
                  {cve.description}
                </Typography>
              </Box>
            </Collapse>
          </Collapse>
        </CardContent>
      </Card>
    );
  };

  return openCVE === 2 ? renderDrawerList() : renderExpandedOrCollapsedList();
}

export default VulnerabilitiyCard;
